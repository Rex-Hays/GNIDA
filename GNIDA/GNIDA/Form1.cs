using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using TUP.AsmResolver;



namespace GNIDA
{
    public partial class Form1 : Form
    {
        GNIDA MyGNIDA = new GNIDA();
        public Form1()
        {
            InitializeComponent();
        }

        private void openToolStripMenuItem_Click_1(object sender, EventArgs e)
        {
            openFileDialog1.ShowDialog();
        }

        public void AddFuncEvent1(object sender, TFunc func)
        {
            Funclist.Items.Add(func.FName);
            if (func.type == 2)//Export
            {
                ListViewItem itm = new ListViewItem(func.FName);
                itm.SubItems.Add(func.Addr.ToString("X8"));
                itm.SubItems.Add(func.Ordinal.ToString("X"));
                listView1.Items.Add(itm);
            }
            if (func.type == 3)//Import
            {
                ListViewItem itm = new ListViewItem(func.Addr.ToString("X8"));
                itm.SubItems.Add(func.Ordinal.ToString("X"));
                itm.SubItems.Add(func.FName);
                itm.SubItems.Add(func.LibraryName);
                listView2.Items.Add(itm);
            }
        }
        public void OnLogEvent1(object sender, string LogStr)
        {
            Log.Items.Add(LogStr);
        }
        public void AddStr1(object sender, string Str)
        {
            AddText(Str);
        }
        delegate void SetTextCallback(string text);
        private void AddText(string text)
        {
            if (this.richTextBox1.InvokeRequired)
            {
                SetTextCallback d = new SetTextCallback(AddText);
                 this.Invoke(d, new object[] { text });
            }
            else
            {
                this.richTextBox1.Text += text;
            }
        }
        private void openFileDialog1_FileOk_1(object sender, CancelEventArgs e)
        {
            MyGNIDA.OnLogEvent += OnLogEvent1;
            MyGNIDA.OnAddFunc += AddFuncEvent1;
            MyGNIDA.OnAddStr += AddStr1;
            MyGNIDA.LoadFile(openFileDialog1.FileName);

            richTextBox2.Text = MyGNIDA.HexDump(MyGNIDA.Sections()[0].RVA, 10);
            richTextBox1.Text = "//+---------------------------------------------------------------------+" +
                              "\n//| Dis file has bin generated by GNU Interactive Dissassembler (GNIDA) |" +
                              "\n//|       Copyleft (c) 2014 by me <na_derevnu@dedushke.ru>              |" +
                              "\n//|                          Free 4 use                                 |" +
                              "\n//|                         Writed AS IS                                |" +
                              "\n//+---------------------------------------------------------------------+\n"+
                              "#pragma option W32\n";
        }

        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            AboutBox1 AboutForm = new AboutBox1();
            AboutForm.ShowDialog();
            AboutForm.Dispose();
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.Close();
        }
        private void toolStripButton4_Click(object sender, EventArgs e)
        {
            MyGNIDA.StopWork();
        }

        private void cmmListingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (richTextBox1.Text.Length > 1)
            {
                richTextBox1.SaveFile("..\\..\\cmm\\tmp.cmm", RichTextBoxStreamType.PlainText);

                System.Diagnostics.Process proc = new System.Diagnostics.Process();
                proc.StartInfo.FileName = "..\\..\\cmm\\c--.exe";
                proc.StartInfo.Arguments = "..\\..\\cmm\\tmp.cmm";
                proc.StartInfo.UseShellExecute = false;
                proc.StartInfo.RedirectStandardOutput = true;
                proc.Start();
                do
                {
                    Log.Items.Add(proc.StandardOutput.ReadLine());
                } while (!proc.StandardOutput.EndOfStream);
                proc.WaitForExit();
            }
        }
    }

}
