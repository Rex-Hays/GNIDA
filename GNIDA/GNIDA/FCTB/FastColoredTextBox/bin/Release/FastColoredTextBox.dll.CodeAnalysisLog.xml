<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files\microsoft visual studio 12.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="12.0">
 <Targets>
  <Target Name="C:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox\bin\Release\FastColoredTextBox.dll">
   <Modules>
    <Module Name="fastcoloredtextbox.dll">
     <Namespaces>
      <Namespace Name="FastColoredTextBoxNS">
       <Types>
        <Type Name="AutocompleteListView" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ProcessCmdKey(System.Windows.Forms.Message&amp;,System.Windows.Forms.Keys)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="AutocompleteMenu.cs" Line="587">'AutocompleteListView.ProcessCmdKey(ref Message, Keys)' calls into 'ContainerControl.ProcessCmdKey(ref Message, Keys)' which has a LinkDemand. By making this call, 'ContainerControl.ProcessCmdKey(ref Message, Keys)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'AutocompleteListView.ProcessCmdKey(ref Message, Keys)'&#xD;&#xA;   -&gt;'AutocompleteListView.ProcessCmdKey(ref Message, Keys)'</Issue>
            </Message>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="AutocompleteMenu.cs" Line="587">Add the following security attribute to 'AutocompleteListView.ProcessCmdKey(ref Message, Keys)' in order to match a LinkDemand on base method 'ContainerControl.ProcessCmdKey(ref Message, Keys)':  [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)].</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BaseBookmarks" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error">Modify 'BaseBookmarks.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="DisposeSignature" Certainty="95" Level="Error">Ensure that 'BaseBookmarks.Dispose()' is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Bookmarks" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Bookmarks.cs" Line="98">Modify 'Bookmarks.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="DisposeSignature" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Bookmarks.cs" Line="98">Ensure that 'Bookmarks.Dispose()' is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExportToRTF" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetRtf(FastColoredTextBoxNS.Range)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Provide correct arguments to formatting methods" Category="Microsoft.Usage" CheckId="CA2241" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="DependsOnFix">
             <Issue Name="MissingFormatItem" Certainty="75" Level="Warning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="ExportToRTF.cs" Line="114">Method 'ExportToRTF.GetRtf(Range)' calls 'string.Format(string, object, object, object)' and does not provide a format item for argument "3". The provided format string is: '"{{\\fonttbl{{\\f0\\fmodern {0};}}}}{{\\fs{1} "'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FastColoredTextBox" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="57">'FastColoredTextBox.FastColoredTextBox()' calls into 'TypeDescriptor.AddProvider(TypeDescriptionProvider, Type)' which has a LinkDemand. By making this call, 'TypeDescriptor.AddProvider(TypeDescriptionProvider, Type)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'FastColoredTextBox.FastColoredTextBox()'&#xD;&#xA;   -&gt;'FastColoredTextBox.FastColoredTextBox()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CloseClipboard()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'FastColoredTextBox.CloseClipboard()' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateCaret(System.IntPtr,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'FastColoredTextBox.CreateCaret(IntPtr, int, int, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DestroyCaret()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'FastColoredTextBox.DestroyCaret()' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="bookmarks" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="6844">'FastColoredTextBox' contains field 'FastColoredTextBox.bookmarks' that is of IDisposable type: 'BaseBookmarks'. Change the Dispose method on 'FastColoredTextBox' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="hints" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="6844">'FastColoredTextBox' contains field 'FastColoredTextBox.hints' that is of IDisposable type: 'Hints'. Change the Dispose method on 'FastColoredTextBox' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetOpenClipboardWindow()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'FastColoredTextBox.GetOpenClipboardWindow()' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HideCaret(System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'FastColoredTextBox.HideCaret(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ImmAssociateContext(System.IntPtr,System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'FastColoredTextBox.ImmAssociateContext(IntPtr, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'FastColoredTextBox.ImmAssociateContext(IntPtr, IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ImmGetContext(System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'FastColoredTextBox.ImmGetContext(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'FastColoredTextBox.ImmGetContext(IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Padding" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Padding()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="663">'FastColoredTextBox.Padding.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Print(FastColoredTextBoxNS.Range,FastColoredTextBoxNS.PrintDialogSettings)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="6709">'FastColoredTextBox.Print(Range, PrintDialogSettings)' calls into 'WebBrowser.Navigate(string)' which has a LinkDemand. By making this call, 'WebBrowser.Navigate(string)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'FastColoredTextBox.Print(Range, PrintDialogSettings)'&#xD;&#xA;   -&gt;'FastColoredTextBox.Print(Range, PrintDialogSettings)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="6709">'FastColoredTextBox.Print(Range, PrintDialogSettings)' calls into 'WebBrowser.StatusTextChanged.add(EventHandler)' which has a LinkDemand. By making this call, 'WebBrowser.StatusTextChanged.add(EventHandler)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'FastColoredTextBox.Print(Range, PrintDialogSettings)'&#xD;&#xA;   -&gt;'FastColoredTextBox.Print(Range, PrintDialogSettings)'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessDialogKey(System.Windows.Forms.Keys)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="3330">'FastColoredTextBox.ProcessDialogKey(Keys)' calls into 'ContainerControl.ProcessDialogKey(Keys)' which has a LinkDemand. By making this call, 'ContainerControl.ProcessDialogKey(Keys)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'FastColoredTextBox.ProcessDialogKey(Keys)'&#xD;&#xA;   -&gt;'FastColoredTextBox.ProcessDialogKey(Keys)'</Issue>
            </Message>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="3330">Add the following security attribute to 'FastColoredTextBox.ProcessDialogKey(Keys)' in order to match a LinkDemand on base method 'ContainerControl.ProcessDialogKey(Keys)':  [UIPermission(SecurityAction.LinkDemand, Window = UIPermissionWindow.AllWindows)].</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessKeyMessage(System.Windows.Forms.Message&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="4053">'FastColoredTextBox.ProcessKeyMessage(ref Message)' calls into 'Control.ProcessKeyMessage(ref Message)' which has a LinkDemand. By making this call, 'Control.ProcessKeyMessage(ref Message)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'FastColoredTextBox.ProcessKeyMessage(ref Message)'&#xD;&#xA;   -&gt;'FastColoredTextBox.ProcessKeyMessage(ref Message)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="4053">'FastColoredTextBox.ProcessKeyMessage(ref Message)' calls into 'Control.ProcessMnemonic(char)' which has a LinkDemand. By making this call, 'Control.ProcessMnemonic(char)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'FastColoredTextBox.ProcessKeyMessage(ref Message)'&#xD;&#xA;   -&gt;'FastColoredTextBox.ProcessKeyMessage(ref Message)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="4053">'FastColoredTextBox.ProcessKeyMessage(ref Message)' calls into 'Message.Msg.get()' which has a LinkDemand. By making this call, 'Message.Msg.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'FastColoredTextBox.ProcessKeyMessage(ref Message)'&#xD;&#xA;   -&gt;'FastColoredTextBox.ProcessKeyMessage(ref Message)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="4053">'FastColoredTextBox.ProcessKeyMessage(ref Message)' calls into 'Message.WParam.get()' which has a LinkDemand. By making this call, 'Message.WParam.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'FastColoredTextBox.ProcessKeyMessage(ref Message)'&#xD;&#xA;   -&gt;'FastColoredTextBox.ProcessKeyMessage(ref Message)'</Issue>
            </Message>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="4053">Add the following security attribute to 'FastColoredTextBox.ProcessKeyMessage(ref Message)' in order to match a LinkDemand on base method 'Control.ProcessKeyMessage(ref Message)':  [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)].</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessMnemonic(System.Char)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="4040">'FastColoredTextBox.ProcessMnemonic(char)' calls into 'ContainerControl.ProcessMnemonic(char)' which has a LinkDemand. By making this call, 'ContainerControl.ProcessMnemonic(char)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'FastColoredTextBox.ProcessMnemonic(char)'&#xD;&#xA;   -&gt;'FastColoredTextBox.ProcessMnemonic(char)'</Issue>
            </Message>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="4040">Add the following security attribute to 'FastColoredTextBox.ProcessMnemonic(char)' in order to match a LinkDemand on base method 'ContainerControl.ProcessMnemonic(char)':  [UIPermission(SecurityAction.LinkDemand, Window = UIPermissionWindow.AllWindows)].</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RightToLeft" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_RightToLeft()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="672">'FastColoredTextBox.RightToLeft.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SendMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'FastColoredTextBox.SendMessage(IntPtr, int, int, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="2" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'wParam' of P/Invoke 'FastColoredTextBox.SendMessage(IntPtr, int, int, int)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
            </Message>
            <Message Id="3" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'lParam' of P/Invoke 'FastColoredTextBox.SendMessage(IntPtr, int, int, int)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
            </Message>
            <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'FastColoredTextBox.SendMessage(IntPtr, int, int, int)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetCaretPos(System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'FastColoredTextBox.SetCaretPos(int, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowCaret(System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'FastColoredTextBox.ShowCaret(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.ComponentModel.ISupportInitialize.BeginInit()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="7027">Make 'FastColoredTextBox' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISupportInitialize.BeginInit()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.ComponentModel.ISupportInitialize.EndInit()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="7031">Make 'FastColoredTextBox' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISupportInitialize.EndInit()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WndProc(System.Windows.Forms.Message&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="2757">'FastColoredTextBox.WndProc(ref Message)' calls into 'Message.Msg.get()' which has a LinkDemand. By making this call, 'Message.Msg.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'FastColoredTextBox.WndProc(ref Message)'&#xD;&#xA;   -&gt;'FastColoredTextBox.WndProc(ref Message)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="2757">'FastColoredTextBox.WndProc(ref Message)' calls into 'Message.WParam.get()' which has a LinkDemand. By making this call, 'Message.WParam.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'FastColoredTextBox.WndProc(ref Message)'&#xD;&#xA;   -&gt;'FastColoredTextBox.WndProc(ref Message)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="2757">'FastColoredTextBox.WndProc(ref Message)' calls into 'UserControl.WndProc(ref Message)' which has a LinkDemand. By making this call, 'UserControl.WndProc(ref Message)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'FastColoredTextBox.WndProc(ref Message)'&#xD;&#xA;   -&gt;'FastColoredTextBox.WndProc(ref Message)'</Issue>
            </Message>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FastColoredTextBox.cs" Line="2757">Add the following security attribute to 'FastColoredTextBox.WndProc(ref Message)' in order to match a LinkDemand on base method 'UserControl.WndProc(ref Message)':  [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)].</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FileTextSource" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FileTextSource.cs" Line="371">Modify 'FileTextSource.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="DisposeSignature" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FileTextSource.cs" Line="371">Ensure that 'FileTextSource.Dispose()' is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveToFile(System.String,System.Text.Encoding)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FileTextSource.cs" Line="212">Object 'tempFs' can be disposed more than once in method 'FileTextSource.SaveToFile(string, Encoding)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 212</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FindForm" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ProcessCmdKey(System.Windows.Forms.Message&amp;,System.Windows.Forms.Keys)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FindForm.cs" Line="105">'FindForm.ProcessCmdKey(ref Message, Keys)' calls into 'Form.ProcessCmdKey(ref Message, Keys)' which has a LinkDemand. By making this call, 'Form.ProcessCmdKey(ref Message, Keys)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'FindForm.ProcessCmdKey(ref Message, Keys)'&#xD;&#xA;   -&gt;'FindForm.ProcessCmdKey(ref Message, Keys)'</Issue>
            </Message>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="FindForm.cs" Line="105">Add the following security attribute to 'FindForm.ProcessCmdKey(ref Message, Keys)' in order to match a LinkDemand on base method 'Form.ProcessCmdKey(ref Message, Keys)':  [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)].</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Hint" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(FastColoredTextBoxNS.Range,System.Windows.Forms.Control,System.String,System.Boolean,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Hints.cs" Line="275">'Hint.Hint(Range, Control, string, bool, bool)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;Hint..ctor(Range, Control, String, Boolean, Boolean)&#xD;&#xA;Hint.Init():Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Hints" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'Hints' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Hints.cs" Line="40">Modify 'Hints.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MarkerStyle" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Drawing.Brush)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Style.cs" Line="307">'MarkerStyle.MarkerStyle(Brush)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;MarkerStyle..ctor(Brush)&#xD;&#xA;Style.set_IsExportable(Boolean):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Style.cs" Line="327">Modify 'MarkerStyle.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="DisposeSignature" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Style.cs" Line="327">Ensure that 'MarkerStyle.Dispose()' is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PlatformType" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetNativeSystemInfo(FastColoredTextBoxNS.PlatformType+SYSTEM_INFO&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'PlatformType.GetNativeSystemInfo(ref PlatformType.SYSTEM_INFO)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSystemInfo(FastColoredTextBoxNS.PlatformType+SYSTEM_INFO&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'PlatformType.GetSystemInfo(ref PlatformType.SYSTEM_INFO)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Range" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#System.Collections.Generic.IEnumerable`1&lt;FastColoredTextBoxNS.Place&gt;.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Make 'Range' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable&lt;Place&gt;.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IEnumerable.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Range.cs" Line="1074">Make 'Range' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReadOnlyStyle" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Style.cs" Line="436">'ReadOnlyStyle.ReadOnlyStyle()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;ReadOnlyStyle..ctor()&#xD;&#xA;Style.set_IsExportable(Boolean):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReplaceForm" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ProcessCmdKey(System.Windows.Forms.Message&amp;,System.Windows.Forms.Keys)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="ReplaceForm.cs" Line="107">'ReplaceForm.ProcessCmdKey(ref Message, Keys)' calls into 'Form.ProcessCmdKey(ref Message, Keys)' which has a LinkDemand. By making this call, 'Form.ProcessCmdKey(ref Message, Keys)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'ReplaceForm.ProcessCmdKey(ref Message, Keys)'&#xD;&#xA;   -&gt;'ReplaceForm.ProcessCmdKey(ref Message, Keys)'</Issue>
            </Message>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="ReplaceForm.cs" Line="107">Add the following security attribute to 'ReplaceForm.ProcessCmdKey(ref Message, Keys)' in order to match a LinkDemand on base method 'Form.ProcessCmdKey(ref Message, Keys)':  [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)].</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SelectionStyle" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Style.cs" Line="292">Modify 'SelectionStyle.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="DisposeSignature" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Style.cs" Line="292">Ensure that 'SelectionStyle.Dispose()' is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ShortcutStyle" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Style.cs" Line="374">Modify 'ShortcutStyle.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="DisposeSignature" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Style.cs" Line="374">Ensure that 'ShortcutStyle.Dispose()' is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SnippetAutocompleteItem" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="AutocompleteItem.cs" Line="155">'SnippetAutocompleteItem.SnippetAutocompleteItem(string)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;SnippetAutocompleteItem..ctor(String)&#xD;&#xA;AutocompleteItem.set_ToolTipTitle(String):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="AutocompleteItem.cs" Line="155">'SnippetAutocompleteItem.SnippetAutocompleteItem(string)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;SnippetAutocompleteItem..ctor(String)&#xD;&#xA;AutocompleteItem.set_ToolTipTitle(String):Void&#xD;&#xA;AutocompleteItem.set_ToolTipText(String):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Style" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Style.cs" Line="26">'Style.Style()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;Style..ctor()&#xD;&#xA;Style.set_IsExportable(Boolean):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Style.cs" Line="78">Modify 'Style.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="DisposeSignature" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Style.cs" Line="78">Ensure that 'Style.Dispose()' is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SyntaxDescriptor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'SyntaxDescriptor' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="SyntaxDescriptor.cs" Line="20">Modify 'SyntaxDescriptor.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SyntaxHighlighter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'SyntaxHighlighter' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BlueBoldStyle" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="SyntaxHighlighter.cs" Line="104">'SyntaxHighlighter' contains field 'SyntaxHighlighter.BlueBoldStyle' that is of IDisposable type: 'Style'. Change the Dispose method on 'SyntaxHighlighter' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="BlueStyle" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="SyntaxHighlighter.cs" Line="104">'SyntaxHighlighter' contains field 'SyntaxHighlighter.BlueStyle' that is of IDisposable type: 'Style'. Change the Dispose method on 'SyntaxHighlighter' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="BoldStyle" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="SyntaxHighlighter.cs" Line="104">'SyntaxHighlighter' contains field 'SyntaxHighlighter.BoldStyle' that is of IDisposable type: 'Style'. Change the Dispose method on 'SyntaxHighlighter' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="BrownStyle" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="SyntaxHighlighter.cs" Line="104">'SyntaxHighlighter' contains field 'SyntaxHighlighter.BrownStyle' that is of IDisposable type: 'Style'. Change the Dispose method on 'SyntaxHighlighter' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="GrayStyle" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="SyntaxHighlighter.cs" Line="104">'SyntaxHighlighter' contains field 'SyntaxHighlighter.GrayStyle' that is of IDisposable type: 'Style'. Change the Dispose method on 'SyntaxHighlighter' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="GreenStyle" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="SyntaxHighlighter.cs" Line="104">'SyntaxHighlighter' contains field 'SyntaxHighlighter.GreenStyle' that is of IDisposable type: 'Style'. Change the Dispose method on 'SyntaxHighlighter' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="MagentaStyle" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="SyntaxHighlighter.cs" Line="104">'SyntaxHighlighter' contains field 'SyntaxHighlighter.MagentaStyle' that is of IDisposable type: 'Style'. Change the Dispose method on 'SyntaxHighlighter' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="MaroonStyle" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="SyntaxHighlighter.cs" Line="104">'SyntaxHighlighter' contains field 'SyntaxHighlighter.MaroonStyle' that is of IDisposable type: 'Style'. Change the Dispose method on 'SyntaxHighlighter' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="RedStyle" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="SyntaxHighlighter.cs" Line="104">'SyntaxHighlighter' contains field 'SyntaxHighlighter.RedStyle' that is of IDisposable type: 'Style'. Change the Dispose method on 'SyntaxHighlighter' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="SyntaxHighlighter.cs" Line="104">Modify 'SyntaxHighlighter.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TextSource" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'TextSource' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(FastColoredTextBoxNS.FastColoredTextBox)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="TextSource.cs" Line="16">'TextSource.TextSource(FastColoredTextBox)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;TextSource..ctor(FastColoredTextBox)&#xD;&#xA;TextSource.InitDefaultStyle():Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="TextSource.cs" Line="325">Modify 'TextSource.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="DisposeSignature" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="TextSource.cs" Line="325">Ensure that 'TextSource.Dispose()' is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TextStyle" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="stringFormat" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Style.cs" Line="163">'TextStyle' contains field 'TextStyle.stringFormat' that is of IDisposable type: 'StringFormat'. Change the Dispose method on 'TextStyle' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Style.cs" Line="163">Modify 'TextStyle.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="DisposeSignature" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Style.cs" Line="163">Ensure that 'TextStyle.Dispose()' is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WavyLineStyle" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2014-05-25 09:03:14Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Style.cs" Line="424">Modify 'WavyLineStyle.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="DisposeSignature" Certainty="95" Level="Error" Path="c:\Users\Damir\Documents\GNIDA\GNIDA\GNIDA\FastColoredTextBox\FastColoredTextBox" File="Style.cs" Line="424">Ensure that 'WavyLineStyle.Dispose()' is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213">
   <Name>Disposable fields should be disposed</Name>
   <Description>If a type that implements IDisposable owns fields that also implement IDisposable, the encapsulating type's Dispose() implementation should call Dispose() on each disposable field.</Description>
   <Resolution Name="Default">{0} contains field {1} that is of IDisposable type: {2}. Change the Dispose method on {0} to call Dispose or Close on this field.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182328.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 212</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182331.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122">
   <Name>Do not indirectly expose methods with link demands</Name>
   <Description>Do not wrap a method protected by a LinkDemand with a method that does not perform a security check. A LinkDemand checks the permissions of the immediate caller rather than checking the permissions of all callers in the call stack. In this case, the permissions of the wrapper method will be checked. If the wrapper method does not, itself, check the permissions of callers higher in the call stack, malicious code might be able to execute the wrapped function even though it lacks permission to do so.</Description>
   <Resolution Name="Default">{0} calls into {1} which has a LinkDemand. By making this call, {1} is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: {2}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182303.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065">
   <Name>Do not raise exceptions in unexpected locations</Name>
   <Description>Do not explicitly raise exceptions from unexpected locations. There are some methods, such as Equals and GetHashCode, which users do not expect to raise exceptions. Therefore calls to these methods are not commonly wrapped in try catch blocks.</Description>
   <Resolution Name="PropertyGetter">{0} creates an exception of type {1}, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386039.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error, Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
   <Name>Implement IDisposable correctly</Name>
   <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
   <Resolution Name="DisposeImplementation">Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Resolution>
   <Resolution Name="DisposeSignature">Ensure that {0} is declared as public and sealed.</Resolution>
   <Resolution Name="ProvideDisposeBool">Provide an overridable implementation of Dispose(bool) on {0} or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms244737.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033">
   <Name>Interface methods should be callable by child types</Name>
   <Description>Explicit method implementations are defined with private accessibility. Classes that derive from classes with explicit method implementations and choose to re-declare them on the class will not be able to call into the base class implementation unless the base class has provided an alternate method with appropriate accessibility. When overriding a base class method that has been hidden by explicit interface implementation, in order to call into the base class implementation, a derived class must cast the base pointer to the relevant interface. When calling through this reference, however, the derived class implementation will actually be invoked, resulting in recursion and an eventual stack overflow.</Description>
   <Resolution Name="Default">Make {0} sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of {1} and is visible to derived classes.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182153.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
   <Name>Move P/Invokes to NativeMethods class</Name>
   <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
   <Resolution Name="Default">Because it is a P/Invoke method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182161.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123">
   <Name>Override link demands should be identical to base</Name>
   <Description>If a virtual method has a LinkDemand, in many cases, so should any override of it, and if an override has a LinkDemand, so should the overridden virtual method. Because it is possible to call any of the overrides of a virtual method explicitly, they should all have the same LinkDemand status or, if not, should be reviewed. This also applies to LinkDemand security checks for methods that part of an interface implementation, because the caller might use an interface-typed reference to access the method.</Description>
   <Resolution Name="BaseOnly">Add the following security attribute to {0} in order to match a LinkDemand on base method {1}:  {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182305(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securitytransparencyrules.dll" Version="4.0.0.0" />
  </Rule>
  <Rule TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901">
   <Name>P/Invoke declarations should be portable</Name>
   <Description>.</Description>
   <Resolution Name="Parameter">As it is declared in your code, parameter {0} of P/Invoke {1} will be {2} bytes wide on {3} platforms. This is not correct, as the actual native declaration of this API indicates it should be {4} bytes wide on {3} platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of {5}.</Resolution>
   <Resolution Name="Return">As it is declared in your code, the return type of P/Invoke {0} will be {1} bytes wide on {2} platforms. This is not correct, as the actual native declaration of this API indicates it should be {3} bytes wide on {2} platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182284(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="portabilityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401">
   <Name>P/Invokes should not be visible</Name>
   <Description>Interop layer should not be public. The DllImport attribute should not be applied to publicly accessible members (public or protected).</Description>
   <Resolution Name="Default">Change the accessibility of P/Invoke {0} so that it is no longer visible from outside its assembly.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182209.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">CriticalError</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Provide correct arguments to formatting methods" Category="Microsoft.Usage" CheckId="CA2241">
   <Name>Provide correct arguments to formatting methods</Name>
   <Description>Provide the correct number of arguments to String.Format calls.</Description>
   <Resolution Name="MissingFormatItem">Method {0} calls {1} and does not provide a format item for argument {2}. The provided format string is: '{3}'</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182361.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
